//Stack using array with the help of templates 
//time complexity of all function is O(1)
#include<iostream>
using namespace std;
template<typename T>
class StackUsingArray{
     T *data;
     int nextindex;
     int capacity;
     public:
     StackUsingArray(){
	     data=new T[4];
	     nextindex=0;
	     capacity=4;
     }
     //size of stack
int size(){
	return nextindex;
}
//stack empty or not
bool IsEmpty(){
	return nextindex==0;
}
//insert an element in stack
void push(T element){
	if(nextindex==capacity){
          T *newdata = new T[2*capacity];
	  for(int i=0;i<capacity;i++){
		  newdata[i]=data[i];
	  }
	  capacity*=2;
	  delete []data;
	  data=newdata;
	}
	data[nextindex++]=element;
}
//delete data from a stack
void pop(){
	if(IsEmpty()){
		cout<<"Stack is full"<<endl;
		return;
	}
	nextindex--;
}
T top(){
	if(IsEmpty()){
		cout<<"Stack is full"<<endl;
		return 0;
	}
	return data[nextindex];
}
};

int main(){
       StackUsingArray<int> s;
       s.push(10);
       s.push(20);
       s.push(30);
       s.push(40);
       s.push(50);
       s.push(60);
       s.pop();
       cout<<s.top()<<endl;
       cout<<s.size();


       
}


//stack using linked list
#include<iostream>
using namespace std;
template<typename T>
class Node{
	public :
	T data;
	Node<T> *next;
	Node(T data){
		this->data=data;
		next=NULL;
	}
};
template<typename T>
class Stack{
      Node<T> *head;
      int size;
      public :
      Stack(){
	      head=NULL;
	      size=0;
      }
 bool IsEmpty(){
	return size==0;
}
int getSize(){
	return size;
}
void push(int data){
        Node<T> *n=new Node<T>(data);
	if(head==NULL){
		head=n;
	}else{
		n->next=head;
		head=n;
	}
	size++;
}
void pop(){
	if(head==NULL)return;
	Node<T> *temp=head;
	head=head->next;
	delete temp;
	size--;

}
T top(){
if(head==NULL)return -1;
return head->data;
	
}

};

int main() {
	Stack<char> s;
	s.push(100);
	s.push(101);
	s.push(102);
	s.push(103);
	s.push(104);


	cout << s.top() << endl;

	s.pop();
	s.pop();
	s.pop();
	cout << s.top() << endl;

	cout << s.getSize() << endl;

	cout << s.IsEmpty() << endl;

}
